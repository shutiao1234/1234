#include<iostream>
#include<cstdlib>
#include<cstring>
#include<stdio.h>
#include<string.h>
using namespace std;
#define MAX 200
#define LEN sizeof(struct student)
int n = 1;
struct student
	{
	char xueqi[20]; //学期
	int no; //学号
	int clas; //班级
	char name[50]; //姓名
    int physics; //物理成绩
	int math; //高数成绩
	int eng; //英语成绩
	int com; //C语言成绩
	int PE; //体育成绩
	int sum;
	float aver;
	};
	
struct node
{
	struct student data;	//数据域
	node* next;	//指针域37	
	};
	
	
	
	node* p, * q, * head = NULL;
	
	void menu();//输出主菜单函数
	void menu3();//添加
	void menu4();//删除
	void add();//输入学生记录
	void to_menu();
	void to_menu2();
	struct node* Delete(int num);
	struct node* Deletee(int no);//bianji
	void save_data();//保存文件
	void read_data();
	void view_data();
	void delete_data();//删除学生记录
	void deletee_data(int no);//删除学生记录bianji
	void addd();//bianji
	void edit_data(); //编辑学生记录
	void find();//查找
	void tongji1();//输出班级学生成绩
	void tongji2();//班级各科成绩平均数
	void tongji3();//班级各科成绩总分
	void tongji4();//统计学生记录
	void query_data_tongji();
	
	
	int main()
	{
		int fun;
		system("mode con cols=100 lines=30");
		system("title 学生成绩管理系统");
		read_data();
		puts("pan");
		menu();
		while (1)

		{
			system("color f5"); //美化菜单
			printf("请输入执行对应序号:", &fun);
			scanf("%d", &fun);
			switch (fun)
			{
			case 0: // 退 出
				break;
			case 1:
				view_data();
				break;
			case 2:
				add();
				break;
			case 3:
				delete_data();
				break;
			case 4:
				edit_data();
				break;
			case 5:
				find();
				break;
			default:
			{
				printf("操作错误\n\n\n");
				break;
			}
			}
			if (fun == 0) break;
			to_menu();
		}
	}
	void add() //添加学生信息
	{
		int b;
		while (1)
		{
			p = (node*)malloc(sizeof(node));
			printf("\n请输入学生信息:");
			printf("\n学期");
			printf("\n	\n");
			getchar();
			gets(p->data.xueqi);

			printf("\n学号");
			printf("\n	\n");
			scanf("%d", &p->data.no);
			printf("\n班级");
			printf("\n	\n");
			scanf("%d", &p->data.clas);
			printf("\n姓名");
			printf("\n	\n");
			getchar();;
			gets(p->data.name);
			printf("\n物理");
			printf("\n	\n");
			scanf("%d", &p->data.physics);
			printf("\n高数");
			printf("\n	\n");
			scanf("%d", &p->data.math);
			printf("\n英语");
			printf("\n	\n");
			scanf("%d", &p->data.eng);
			printf("\nC语言");
			printf("\n	\n");
			scanf("%d", &p->data.com);
			printf("\n体育");
			printf("\n	\n");
			scanf("%d", &p->data.PE);
			p->data.sum = p->data.physics + p->data.math + p->data.eng + p->data.com + p->data.PE;
			p->data.aver = (p->data.sum*1.0) / 5; n++;
			p->next = NULL;
			if (head == NULL) 
				head = p;
			else
				q->next = p;
			q = p;
			menu3();
			scanf("%d", &b); 	
			if (b == 0)
				break;
		}
		save_data();
	}
	
	void menu() //输出主菜单函数
	{
		system("cls"); //清空屏幕函数
		printf("\n");
		cout << "\t\t┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓ " << endl;
		cout << "\t\t┃	学生成绩管理系统	┃ " << endl;
		cout << "\t\t┃ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┃ " << endl;
		cout << "\t\t┃	1-输出学生信息	┃ " << endl;
		cout << "\t\t┃	2-添加学生信息	┃ " << endl;
		cout << "\t\t┃	3-删除学生信息	┃ " << endl;
		cout << "\t\t┃	4-修改学生信息	┃ " << endl;
		cout << "\t\t┃	5-查询学生信息	┃ " << endl;
		cout << "\t\t┃	0-退出程序	┃ " << endl;
		cout << "\t\t┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛ " << endl;
	}
	void menu3() //是否
	{
		system("cls"); //清空屏幕函数
		printf("\n");
		cout << "\t\t┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓ " << endl;
		cout << "\t\t┃	继续添加学生信息	┃ " << endl;
		cout << "\t\t┃	1-yes	0-no	┃ " << endl;
		cout << "\t\t┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛ " << endl;
	}
	void menu4() //删除成功
	{
		system("cls"); //清空屏幕函数
		printf("\n");
		cout << "\t\t┏ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┓ " << endl;
		cout << "\t\t┃	删除成功！！！	┃ " << endl;
		cout << "\t\t┗ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ━ ┛ " << endl;
	}
	void to_menu() //to_menu函数
	{
		char c1, c2;
		printf("\n\n\n按回车键返回主菜单..."); scanf("%c%c", &c1, &c2);

		menu(); //调用menu函数
	}
	void view_data()
	{
		printf("学期\t学号\t\t班级\t\t姓名\t\t物理\t高数\t英语\tC语言\t体育\t总分 \t平均分");
		printf("\n	\n");
		for (node* i = head; i != NULL; i = i->next)
		{
			printf("%s\t\t%d\t%-15d%s\t\t%-8d%-8d%-8d%-8d%-8d%-8d%-8.1f\n", i->data.xueqi, i->data.no, i->data.clas, i->data.name, i->data.physics, i->data.math, i->data.eng,
				i->data.com, i->data.PE, i->data.sum, i->data.aver);
		}
	}
	void edit_data()	//编辑学生记录
	{
		int no;
		printf("\n请输入要编辑学生的学号:");
		scanf("%d", &no);
		deletee_data(no);
		addd(); 
	}
	void read_data()
	{
		struct node* j = NULL;
		char	xueqi[20];
		FILE* pf = fopen("score.txt", "r");	// 以读方式打开文件
		if (!pf)
			return;


		// 打开文件失败
		//从文件中逐一读出每一联系人信息
		struct node* i;
		//fscanf(pf,"%d",&n);
		for (int l = 0; l < n; l++)
		{
			i = (node*)malloc(sizeof(node));
			fscanf(pf, "%s %d %d %s %d %d %d %d %d", i->data.xueqi, &i->data.no, &i->data.clas, i->data.name, &i->data.physics, &i->data.math, &i->data.eng, &i->data.com,
				&i->data.PE);
			i->data.sum = i->data.physics + i->data.math + i->data.eng + i->data.com + i->data.PE;

			i->data.aver = i->data.sum / 5;
			i->next = j;
			j = i;
			i = NULL;
		}
		fclose(pf);	//关闭文件
	}
	void save_data()
	{
		struct	node* i = head;
		FILE* pf = fopen("score.txt", "w");	//以写方式打开文件
		if (!pf)	//打开文件失败
			return;
		while (i)	//将链表中的每一结点（联系点）写入文件
		{
			fprintf(pf, "%s %d %d %s %d %d %d %d %d", i->data.xueqi, i->data.no, i->data.clas, i->data.name, i->data.physics, i->data.math, i->data.eng, i->data.com, i->data.PE);
			i = i->next;
		}
		fclose(pf);	//关闭文件
	}
	struct node* Delete(int num)
	{
		//删除值为num的结点
		int f = 0;
		struct node* p1; // 指向要删除的结点
		struct node* p2; //指向p1的前一个结点
		if (head == NULL)	//空表
		{
			return (head);
		}
		p1 = head;
		while (num != p1->data.no && p1->next != NULL)
		{
			p2 = p1;
			p1 = p1->next;
		}
		if (num == p1->data.no)
		{
			f = -1;
			if (p1 == head)	//要删除的是头结点
				head = p1->next;
			else

				p2->next = p1->next;
			free(p1);
			menu4();
		}
		if (!f)
			printf("\n\n没有找到该学生(学号-%d)!", num);
		return (head); //返回新的表头
	}
	void delete_data()	//删除学生记录
	{
		int no;
		view_data();
		printf("\n请输入要删除学生的学号:");
		scanf("%d", &no);
		Delete(no);
		save_data();
	}
	void find()
	{
		int no;
		int f = 1;
		view_data();
		printf("\n请输入要查询学生的学号:");
		scanf("%d", &no);
		for (node* i = head; i != NULL; i = i->next)
		{
			if (i->data.no == no)
			{
				f = 0;
				printf("%s\t\t%d\t%-15d%s\t\t%-8d%-8d%-8d%-8d%-8d%-8d%-8.1f\n", i->data.xueqi, i->data.no, i->data.clas, i->data.name, i->data.physics, i->data.math, i->data.eng,
					i->data.com, i->data.PE, i->data.sum, i->data.aver);
			}
		}
		if (f)
			printf("\n\n\n\n没有找到该学生(姓名-%d)!", no);
	}
	void addd() //添加学生信息
	{
		int b = 0;
		while (1)
		{
			p = (node*)malloc(sizeof(node));
			printf("\n请输入学生信息:");

			printf("\n学期");
			printf("\n	\n");
			getchar();
			gets(p->data.xueqi);
			printf("\n学号");
			printf("\n	\n");
			scanf("%d", &p->data.no);
			printf("\n班级");
			printf("\n	\n");
			scanf("%d", &p->data.clas);
			printf("\n姓名");
			printf("\n	\n");
			getchar();;
			gets(p->data.name);
			printf("\n物理");
			printf("\n	\n");
			scanf("%d", &p->data.physics);
			printf("\n高数");
			printf("\n	\n");
			scanf("%d", &p->data.math);
			printf("\n英语");
			printf("\n	\n");
			scanf("%d", &p->data.eng);
			printf("\nC语言");
			printf("\n	\n");
			scanf("%d", &p->data.com);
			printf("\n体育");
			printf("\n	\n");
			scanf("%d", &p->data.PE);
			p->data.sum = p->data.physics + p->data.math + p->data.eng + p->data.com + p->data.PE;
			p->data.aver = p->data.sum / 5; n++;
			p->next = NULL;
			if (head == NULL)
				head = p;
			else
				q->next = p;
			q = p;
			b = 1;
			if (b == 1)
				break;
		}
		save_data();

	}
	void deletee_data(int no)	//删除学生记录
	{
		Deletee(no);
		save_data();
	}
	struct node* Deletee(int num)
	{
		//删除值为num的结点
		int f = 0;
		struct node* p1; // 指向要删除的结点
		struct node* p2; //指向p1的前一个结点
		if (head == NULL)	//空表
		{
			return (head);
		}
		p1 = head;
		while (num != p1->data.no && p1->next != NULL)
		{
			//查找要删除的结点379	p2 = p1;
			p1 = p1->next;
		}
		if (num == p1->data.no)
		{
			// 找到了
			f = -1;
			if (p1 == head)	//要删除的是头结点
				head = p1->next;
			else// 要删除的不是头结点
				p2->next = p1->next;
			free(p1); //释放被删除结点所占的内存空间
		}
		if (!f)
			printf("\n\n没有找到该学生(学号-%d)!", num);
		return (head); //返回新的表头
	}

